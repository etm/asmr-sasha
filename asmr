#!/usr/bin/ruby
require 'discordrb'
require 'daemonite'
require 'base64'

class String
  def justify(len = 80)
    words = self.scan(/[\w\*\r\n]+/)
    actual_len = 0
    output = ""
    words.each do |w|
      output += w
      actual_len += w.length
      if actual_len >= len
        output += "\n"
        actual_len = 0
      else
        output += " "
      end
    end
    return output
  end
end

def voice_commands(bot)
  commands = []
  Dir[File.join(__dir__,'**/*.pcm')].sort.each do |f|
    name = File.basename(f,'.pcm')
    next if name.match(/___/)
    commands << name.to_sym
    bot.command(name.to_sym) do |event,*args|
      if event.author.hoist_role&.name !~ /Student/
        voice_bot = event.voice
        if voice_bot
          p voice_bot
          voice_bot.play(File.open(f))
          args.each do |ff|
            fname = Dir.glob('**/' + ff + '.pcm')
            voice_bot.play(File.open(fname[0])) if fname.length > 0  if voice_bot
          end
          nil
        end
      else
        event.respond "Do you feel lucky, punk?"
      end
    end
  end
  gcoms = {}
  Dir[File.join(__dir__,'*/*.pcm')].sort.each do |f|
    next if f.match(/___/)
    gcoms[File::basename(File::dirname(f)).to_sym] ||= []
    gcoms[File::basename(File::dirname(f)).to_sym] << f
  end
  gcoms.each do |g,k|
    bot.command(g) do |event|
      if event.author.hoist_role&.name !~ /Student/
        voice_bot = event.voice
        voice_bot.play(File.open(k.rotate![0])) if voice_bot
      else
        event.respond "Do you feel lucky, punk?"
      end
    end
  end
  [ gcoms, commands.uniq ]
end

Daemonite.new do
  on startup do |opts|
    opts[:bot] = Discordrb::Commands::CommandBot.new token: File.read(File.join(__dir__,'token')).strip, prefix: '!'
    opts[:bot].debug = true
    gcoms, commands = voice_commands opts[:bot]

    opts[:bot].voice_state_update do |event|
      if event.user.current_bot?
        if opts[:bot].voices.any? && event.channel != event.old_channel
          opts[:bot].voice_connect(event.channel)
        end
      end
    end

    opts[:bot].command(:connect) do |event|
      if event.author.hoist_role&.name !~ /Student/
        channel = event.user.voice_channel
        next "You're not in any voice channel!" unless channel
        opts[:bot].voice_connect(channel)
        event.respond "Connected to voice channel: #{channel.name}"
      else
        event.respond "No, you lowly peasant."
      end
    end
    opts[:bot].command(:disconnect) do |event|
      channel = event.user.voice_channel
      next "You're not in any voice channel!" unless channel
      opts[:bot].voice_destroy(event.user.server)
    end
    opts[:bot].command(:reconnect) do |event|
      opts[:bot].voice_destroy(event.user.server)
      channel = event.user.voice_channel
      next "You're not in any voice channel!" unless channel
      opts[:bot].voice_connect(channel)
      event.respond "Connected to voice channel: #{channel.name}"
    end

    opts[:bot].command(:yt) do |event,args|
      if event.author.hoist_role&.name !~ /Student/
        voice_bot = event.voice
        u = args
        ue = Base64.urlsafe_encode64(u,padding:false)

        unless File.exist?("___#{ue}.pcm")
          event.respond "Sure thing. Will take a while."
          `yt-dlp -x --audio-format mp3 --audio-quality 0 \"#{u}\" -o .#{ue}.mp3`
          `ffmpeg -i .#{ue}.mp3 -loglevel 0  -f s16le -ar 48000 -ac 2 ___#{ue}.pcm`
          File.unlink(".#{ue}.mp3")
        end

        event.respond "I'm doin it!"
        voice_bot.play(File.open("___#{ue}.pcm")) if voice_bot
      end
    end
    opts[:bot].command(:se) do |event,*args|
      if event.author.hoist_role&.name !~ /Student/
        voice_bot = event.voice
        u = args.join(' ')
        ue = Base64.urlsafe_encode64(u,padding:false)
        unless File.exist?("___#{ue}.pcm")
          `gtts-cli -l en "#{u.gsub(/[^a-zA-Z0-9öäüßÖÄÜ:,!?]/,'')}" -o .#{ue}.mp3`
          `ffmpeg -i .#{ue}.mp3 -loglevel 0  -f s16le -ar 48000 -ac 2 ___#{ue}.pcm`
          File.unlink(".#{ue}.mp3")
        end
        voice_bot.play(File.open("___#{ue}.pcm")) if voice_bot
      end
    end
    opts[:bot].command(:sd) do |event,*args|
      if event.author.hoist_role&.name !~ /Student/
        voice_bot = event.voice
        u = args.join(' ')
        ue = Base64.urlsafe_encode64(u,padding:false)
        unless File.exist?("___#{ue}.pcm")
          `gtts-cli -l de "#{u.gsub(/[^a-zA-Z0-9öäüßÖÄÜ:,!?]/,'')}" -o .#{ue}.mp3`
          `ffmpeg -i .#{ue}.mp3 -loglevel 0  -f s16le -ar 48000 -ac 2 ___#{ue}.pcm`
          File.unlink(".#{ue}.mp3")
        end
        voice_bot.play(File.open("___#{ue}.pcm")) if voice_bot
      end
    end
    opts[:bot].command(:reload) do |event|
      commands.each do |c|
        opts[:bot].remove_command c
      end
      gcoms, commands = voice_commands opts[:bot]
      nil
    end

    opts[:bot].command(:stop) do |event|
      voice_bot = event.voice
      voice_bot.stop_playing if voice_bot
    end

    opts[:bot].command(:help) do |event|
      "\n**Loose:** #{commands.sort.join(', ')}".justify.split('\n').each do |m|
        event.respond m
      end
      "\n**Groups:** #{gcoms.keys.sort.join(', ')}".justify.split('\n').each do |m|
        event.respond m
      end
      "\n**Admin:** connect, disconnect, reconnect, reload, stop".justify.split('\n').each do |m|
        event.respond m
      end
      nil
    end
    opts[:bot].command(:ping) do |event|
      event.respond "Fuck off, #{event.author.display_name}!"
    end
  rescue => e
    puts e.message
  end
  run do |opts|
    opts[:bot].run
  end
  on exit do |opts|
    opts[:bot].stop
    opts[:bot].join
  end
end.go!
