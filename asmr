#!/usr/bin/ruby
require 'discordrb'
require 'daemonite'

def voice_commands(bot)
  commands = []
  Dir[File.join(__dir__,'**/*.pcm')].uniq.sort.each do |f|
    name = File.basename(f,'.pcm')
    commands << name.to_sym
    bot.command(name.to_sym) do |event|
      voice_bot = event.voice
      voice_bot.play(File.open(f)) if voice_bot
    end
  end
  gcoms = {}
  Dir[File.join(__dir__,'*/*.pcm')].sort.each do |f|
    gcoms[File::basename(File::dirname(f)).to_sym] ||= []
    gcoms[File::basename(File::dirname(f)).to_sym] << f
  end
  gcoms.each do |g,k|
    bot.command(g) do |event|
      voice_bot = event.voice
      voice_bot.play(File.open(k.rotate![0])) if voice_bot
    end
  end
  [ gcoms, commands ]
end

Daemonite.new do
  on startup do |opts|
    opts[:bot] = Discordrb::Commands::CommandBot.new token: File.read(File.join(__dir__,'token')).strip, prefix: '!'
    gcoms, commands = voice_commands opts[:bot]

    opts[:bot].command(:connect) do |event|
      if event.author.hoist_role&.name !~ /Student/
        channel = event.user.voice_channel
        next "You're not in any voice channel!" unless channel
        opts[:bot].voice_connect(channel)
        event.respond "Connected to voice channel: #{channel.name}"
      else
        event.respond "No, you lowly peasant."
      end
    end
    opts[:bot].command(:disconnect) do |event|
      channel = event.user.voice_channel
      next "You're not in any voice channel!" unless channel
      opts[:bot].voice_destroy(event.user.server)
    end

    opts[:bot].command(:reload) do |event|
      commands.each do |c|
        opts[:bot].remove_command c
      end
      gcoms, commands = voice_commands opts[:bot]
      "Available commands: #{commands.join(', ')}"
    end

    opts[:bot].command(:stop) do |event|
      voice_bot = event.voice
      voice_bot.stop_playing if voice_bot
    end

    opts[:bot].command(:help) do |event|
      event.respond "**Loose:** #{commands.sort.join(', ')}\n" +
                    "**Groups:** #{gcoms.keys.sort.join(', ')}\n" +
                    "**Admin:** connect, disconnect, reload, stop"
    end
    opts[:bot].command(:ping) do |event|
      event.respond "Fuck off, #{event.author.display_name}!"
    end
  rescue => e
    puts e
  end
  run do |opts|
    opts[:bot].run
  end
  on exit do |opts|
    opts[:bot].stop
    opts[:bot].join
  end
end.go!
